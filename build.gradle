plugins {
    id 'java'
    alias(libs.plugins.shadow)
    alias(libs.plugins.run.paper)
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    compileOnly libs.paper.api

    implementation libs.bundles.adventure
    implementation libs.configlib
    implementation libs.bstats

    compileOnly libs.bundles.plugin.integrations
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

tasks.withType(JavaCompile).configureEach {
    options.release = targetJavaVersion
    options.encoding = 'UTF-8'
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

def props = [
        name       : project.name,
        id         : project.name.toLowerCase(Locale.ROOT),
        version    : project.version,
        description: project.description,
        author     : project.author,
        repo       : project.repo
]

processResources {
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def processTemplates = tasks.register('processTemplates', Copy) {
    inputs.properties props
    from file('src/main/java-templates')
    into layout.buildDirectory.dir('generated/sources/java-templates').get().asFile
    expand props
}
tasks.shadowJar.dependsOn(processTemplates)
sourceSets.main.java.srcDir(processTemplates.map { it.outputs })

shadowJar {
    archiveClassifier = ''
    minimize()
    enableRelocation = true
    relocationPrefix = 'me.rockquiet.joinprotection.3rdparty'
}

tasks {
    // Paper
    runServer {
        // Integration into other plugins
        /*
        downloadPlugins {
            hangar("PlaceholderAPI", "2.11.6")
            modrinth("MiniPlaceholders", "J2guR3GH") // 2.2.4
            url("https://download.luckperms.net/1556/bukkit/loader/LuckPerms-Bukkit-5.4.141.jar")
        }
         */
        minecraftVersion("1.21.1")
    }
    // Folia
    runPaper.folia.registerTask()
    runFolia {
        runDirectory(file("runFolia"))
        minecraftVersion("1.20.6")
    }
}

void disableStats(DirectoryProperty runDir) {
    def cfg = file(runDir.asFile.getOrElse(file("run")).name + "/plugins/bStats/config.yml")
    if (!cfg.exists()) {
        cfg.parentFile.mkdirs()
        cfg.setText("enabled: false\n", "UTF-8")
    }
}

tasks.runFolia.doFirst { disableStats(runFolia.getRunDirectory()) }
tasks.runServer.doFirst { disableStats(runServer.getRunDirectory()) }